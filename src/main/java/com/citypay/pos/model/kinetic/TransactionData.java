/*
 * Kinetic Smart API
 * Kinetic Smart Swagger Implementatin
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.citypay.pos.model.kinetic;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TransactionData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-19T12:47:05.325Z")
public class TransactionData {
  @SerializedName("acquirer_response")
  private String acquirerResponse = null;

  @SerializedName("additional_data")
  private String additionalData = null;

  @SerializedName("authorizing_entity")
  private String authorizingEntity = null;

  @SerializedName("auxiliary_data")
  private String auxiliaryData = null;

  @SerializedName("base_amount")
  private Integer baseAmount = null;

  @SerializedName("card_presented")
  private Boolean cardPresented = null;

  @SerializedName("card_type")
  private String cardType = null;

  @SerializedName("completed_at")
  private Integer completedAt = null;

  @SerializedName("created_at")
  private Integer createdAt = null;

  @SerializedName("currency_symbol")
  private String currencySymbol = null;

  @SerializedName("customer_receipt")
  private String customerReceipt = null;

  @SerializedName("cvm_mode")
  private String cvmMode = null;

  @SerializedName("datasource")
  private String datasource = null;

  @SerializedName("declined_by_card")
  private Boolean declinedByCard = null;

  @SerializedName("emv_app_cryptogram")
  private String emvAppCryptogram = null;

  @SerializedName("emv_app_expiration_date")
  private String emvAppExpirationDate = null;

  @SerializedName("emv_app_txn_counter")
  private Integer emvAppTxnCounter = null;

  @SerializedName("emv_authorized_amount")
  private String emvAuthorizedAmount = null;

  @SerializedName("emv_cardholder_verification_results")
  private String emvCardholderVerificationResults = null;

  @SerializedName("emv_country_code")
  private String emvCountryCode = null;

  @SerializedName("emv_cryptogram_info_data")
  private String emvCryptogramInfoData = null;

  @SerializedName("emv_icc_appid")
  private String emvIccAppid = null;

  @SerializedName("emv_interchange_profile")
  private String emvInterchangeProfile = null;

  @SerializedName("emv_issuer_app_data")
  private String emvIssuerAppData = null;

  @SerializedName("emv_pan_seq_num")
  private String emvPanSeqNum = null;

  @SerializedName("emv_terminal_capabilities")
  private String emvTerminalCapabilities = null;

  @SerializedName("emv_terminal_type")
  private String emvTerminalType = null;

  @SerializedName("emv_terminal_verification_results")
  private String emvTerminalVerificationResults = null;

  @SerializedName("emv_track2_equivalent")
  private String emvTrack2Equivalent = null;

  @SerializedName("emv_txn_currency_code")
  private String emvTxnCurrencyCode = null;

  @SerializedName("emv_txn_date")
  private String emvTxnDate = null;

  @SerializedName("emv_txn_sequence_counter")
  private String emvTxnSequenceCounter = null;

  @SerializedName("emv_txn_status_info")
  private String emvTxnStatusInfo = null;

  @SerializedName("emv_txn_type")
  private String emvTxnType = null;

  @SerializedName("emv_txn_unpredictable_number")
  private String emvTxnUnpredictableNumber = null;

  @SerializedName("is_api")
  private Boolean isApi = null;

  @SerializedName("is_closed")
  private Boolean isClosed = null;

  @SerializedName("is_commercial_card")
  private Boolean isCommercialCard = null;

  @SerializedName("is_completed")
  private Boolean isCompleted = null;

  @SerializedName("is_contactless")
  private Boolean isContactless = null;

  @SerializedName("is_fallback")
  private Boolean isFallback = null;

  @SerializedName("is_offline")
  private Boolean isOffline = null;

  @SerializedName("is_pending")
  private Boolean isPending = null;

  @SerializedName("is_voided")
  private Boolean isVoided = null;

  @SerializedName("merchant_receipt")
  private String merchantReceipt = null;

  @SerializedName("message_number")
  private String messageNumber = null;

  @SerializedName("message_type")
  private String messageType = null;

  @SerializedName("response_code")
  private String responseCode = null;

  @SerializedName("response_text")
  private String responseText = null;

  @SerializedName("result")
  private String result = null;

  @SerializedName("scheme")
  private String scheme = null;

  @SerializedName("signature_required")
  private Boolean signatureRequired = null;

  @SerializedName("terminal_id")
  private String terminalId = null;

  @SerializedName("total_amount")
  private Integer totalAmount = null;

  @SerializedName("transaction_type")
  private String transactionType = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("verified_by_odcvm")
  private Boolean verifiedByOdcvm = null;

  @SerializedName("verified_by_pin")
  private Boolean verifiedByPin = null;

  public TransactionData acquirerResponse(String acquirerResponse) {
    this.acquirerResponse = acquirerResponse;
    return this;
  }

   /**
   * The response string from the acquirer as per the ISO/Apacs specifications
   * @return acquirerResponse
  **/
  @ApiModelProperty(example = "APPROVED", value = "The response string from the acquirer as per the ISO/Apacs specifications")
  public String getAcquirerResponse() {
    return acquirerResponse;
  }

  public void setAcquirerResponse(String acquirerResponse) {
    this.acquirerResponse = acquirerResponse;
  }

  public TransactionData additionalData(String additionalData) {
    this.additionalData = additionalData;
    return this;
  }

   /**
   * ISO/Apacs specifications additional data provided within the acquirer response
   * @return additionalData
  **/
  @ApiModelProperty(example = "000800", value = "ISO/Apacs specifications additional data provided within the acquirer response")
  public String getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }

  public TransactionData authorizingEntity(String authorizingEntity) {
    this.authorizingEntity = authorizingEntity;
    return this;
  }

   /**
   * The identity authorizing the transaction
   * @return authorizingEntity
  **/
  @ApiModelProperty(example = "card issuer", value = "The identity authorizing the transaction")
  public String getAuthorizingEntity() {
    return authorizingEntity;
  }

  public void setAuthorizingEntity(String authorizingEntity) {
    this.authorizingEntity = authorizingEntity;
  }

  public TransactionData auxiliaryData(String auxiliaryData) {
    this.auxiliaryData = auxiliaryData;
    return this;
  }

   /**
   * Value provided by online processing as per the ISO/Apacs specifications
   * @return auxiliaryData
  **/
  @ApiModelProperty(example = "CEAB962F", value = "Value provided by online processing as per the ISO/Apacs specifications")
  public String getAuxiliaryData() {
    return auxiliaryData;
  }

  public void setAuxiliaryData(String auxiliaryData) {
    this.auxiliaryData = auxiliaryData;
  }

  public TransactionData baseAmount(Integer baseAmount) {
    this.baseAmount = baseAmount;
    return this;
  }

   /**
   * The base amount processed
   * @return baseAmount
  **/
  @ApiModelProperty(example = "1", value = "The base amount processed")
  public Integer getBaseAmount() {
    return baseAmount;
  }

  public void setBaseAmount(Integer baseAmount) {
    this.baseAmount = baseAmount;
  }

  public TransactionData cardPresented(Boolean cardPresented) {
    this.cardPresented = cardPresented;
    return this;
  }

   /**
   * Whether the card was presented to the device
   * @return cardPresented
  **/
  @ApiModelProperty(example = "true", value = "Whether the card was presented to the device")
  public Boolean isCardPresented() {
    return cardPresented;
  }

  public void setCardPresented(Boolean cardPresented) {
    this.cardPresented = cardPresented;
  }

  public TransactionData cardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

   /**
   * The type of card used such as EMV
   * @return cardType
  **/
  @ApiModelProperty(example = "EMV", value = "The type of card used such as EMV")
  public String getCardType() {
    return cardType;
  }

  public void setCardType(String cardType) {
    this.cardType = cardType;
  }

  public TransactionData completedAt(Integer completedAt) {
    this.completedAt = completedAt;
    return this;
  }

   /**
   * The date and time that the transaction was completed in UTC seconds value
   * @return completedAt
  **/
  @ApiModelProperty(value = "The date and time that the transaction was completed in UTC seconds value")
  public Integer getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(Integer completedAt) {
    this.completedAt = completedAt;
  }

  public TransactionData createdAt(Integer createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time that the transaction was completed in UTC seconds value
   * @return createdAt
  **/
  @ApiModelProperty(value = "The date and time that the transaction was completed in UTC seconds value")
  public Integer getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }

  public TransactionData currencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
    return this;
  }

   /**
   * The currency symbol used
   * @return currencySymbol
  **/
  @ApiModelProperty(example = "£", value = "The currency symbol used")
  public String getCurrencySymbol() {
    return currencySymbol;
  }

  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }

  public TransactionData customerReceipt(String customerReceipt) {
    this.customerReceipt = customerReceipt;
    return this;
  }

   /**
   * The customer receipt to print
   * @return customerReceipt
  **/
  @ApiModelProperty(value = "The customer receipt to print")
  public String getCustomerReceipt() {
    return customerReceipt;
  }

  public void setCustomerReceipt(String customerReceipt) {
    this.customerReceipt = customerReceipt;
  }

  public TransactionData cvmMode(String cvmMode) {
    this.cvmMode = cvmMode;
    return this;
  }

   /**
   * The card holder verification method used
   * @return cvmMode
  **/
  @ApiModelProperty(value = "The card holder verification method used")
  public String getCvmMode() {
    return cvmMode;
  }

  public void setCvmMode(String cvmMode) {
    this.cvmMode = cvmMode;
  }

  public TransactionData datasource(String datasource) {
    this.datasource = datasource;
    return this;
  }

   /**
   * A string of the source of data
   * @return datasource
  **/
  @ApiModelProperty(value = "A string of the source of data")
  public String getDatasource() {
    return datasource;
  }

  public void setDatasource(String datasource) {
    this.datasource = datasource;
  }

  public TransactionData declinedByCard(Boolean declinedByCard) {
    this.declinedByCard = declinedByCard;
    return this;
  }

   /**
   * Boolean value should the transaction be declined by the card
   * @return declinedByCard
  **/
  @ApiModelProperty(example = "false", value = "Boolean value should the transaction be declined by the card")
  public Boolean isDeclinedByCard() {
    return declinedByCard;
  }

  public void setDeclinedByCard(Boolean declinedByCard) {
    this.declinedByCard = declinedByCard;
  }

  public TransactionData emvAppCryptogram(String emvAppCryptogram) {
    this.emvAppCryptogram = emvAppCryptogram;
    return this;
  }

   /**
   * Cryptogram used by the card in processing
   * @return emvAppCryptogram
  **/
  @ApiModelProperty(example = "CDC35CA0090BC8", value = "Cryptogram used by the card in processing")
  public String getEmvAppCryptogram() {
    return emvAppCryptogram;
  }

  public void setEmvAppCryptogram(String emvAppCryptogram) {
    this.emvAppCryptogram = emvAppCryptogram;
  }

  public TransactionData emvAppExpirationDate(String emvAppExpirationDate) {
    this.emvAppExpirationDate = emvAppExpirationDate;
    return this;
  }

   /**
   * Expiry date of the card
   * @return emvAppExpirationDate
  **/
  @ApiModelProperty(example = "1121", value = "Expiry date of the card")
  public String getEmvAppExpirationDate() {
    return emvAppExpirationDate;
  }

  public void setEmvAppExpirationDate(String emvAppExpirationDate) {
    this.emvAppExpirationDate = emvAppExpirationDate;
  }

  public TransactionData emvAppTxnCounter(Integer emvAppTxnCounter) {
    this.emvAppTxnCounter = emvAppTxnCounter;
    return this;
  }

   /**
   * A transaction counter, incremented by the device resulting in a transaction number
   * @return emvAppTxnCounter
  **/
  @ApiModelProperty(example = "5", value = "A transaction counter, incremented by the device resulting in a transaction number")
  public Integer getEmvAppTxnCounter() {
    return emvAppTxnCounter;
  }

  public void setEmvAppTxnCounter(Integer emvAppTxnCounter) {
    this.emvAppTxnCounter = emvAppTxnCounter;
  }

  public TransactionData emvAuthorizedAmount(String emvAuthorizedAmount) {
    this.emvAuthorizedAmount = emvAuthorizedAmount;
    return this;
  }

   /**
   * The amount authorised
   * @return emvAuthorizedAmount
  **/
  @ApiModelProperty(example = "100", value = "The amount authorised")
  public String getEmvAuthorizedAmount() {
    return emvAuthorizedAmount;
  }

  public void setEmvAuthorizedAmount(String emvAuthorizedAmount) {
    this.emvAuthorizedAmount = emvAuthorizedAmount;
  }

  public TransactionData emvCardholderVerificationResults(String emvCardholderVerificationResults) {
    this.emvCardholderVerificationResults = emvCardholderVerificationResults;
    return this;
  }

   /**
   * Verification results within the processing scope
   * @return emvCardholderVerificationResults
  **/
  @ApiModelProperty(example = "3F0000", value = "Verification results within the processing scope")
  public String getEmvCardholderVerificationResults() {
    return emvCardholderVerificationResults;
  }

  public void setEmvCardholderVerificationResults(String emvCardholderVerificationResults) {
    this.emvCardholderVerificationResults = emvCardholderVerificationResults;
  }

  public TransactionData emvCountryCode(String emvCountryCode) {
    this.emvCountryCode = emvCountryCode;
    return this;
  }

   /**
   * A country code returned by the device
   * @return emvCountryCode
  **/
  @ApiModelProperty(example = "826", value = "A country code returned by the device")
  public String getEmvCountryCode() {
    return emvCountryCode;
  }

  public void setEmvCountryCode(String emvCountryCode) {
    this.emvCountryCode = emvCountryCode;
  }

  public TransactionData emvCryptogramInfoData(String emvCryptogramInfoData) {
    this.emvCryptogramInfoData = emvCryptogramInfoData;
    return this;
  }

   /**
   * Cryptogram info returned by the card
   * @return emvCryptogramInfoData
  **/
  @ApiModelProperty(example = "80", value = "Cryptogram info returned by the card")
  public String getEmvCryptogramInfoData() {
    return emvCryptogramInfoData;
  }

  public void setEmvCryptogramInfoData(String emvCryptogramInfoData) {
    this.emvCryptogramInfoData = emvCryptogramInfoData;
  }

  public TransactionData emvIccAppid(String emvIccAppid) {
    this.emvIccAppid = emvIccAppid;
    return this;
  }

   /**
   * The application id (AID) identifying the card used
   * @return emvIccAppid
  **/
  @ApiModelProperty(example = "A0000000031010", value = "The application id (AID) identifying the card used")
  public String getEmvIccAppid() {
    return emvIccAppid;
  }

  public void setEmvIccAppid(String emvIccAppid) {
    this.emvIccAppid = emvIccAppid;
  }

  public TransactionData emvInterchangeProfile(String emvInterchangeProfile) {
    this.emvInterchangeProfile = emvInterchangeProfile;
    return this;
  }

   /**
   * The interchange profile used
   * @return emvInterchangeProfile
  **/
  @ApiModelProperty(example = "+00", value = "The interchange profile used")
  public String getEmvInterchangeProfile() {
    return emvInterchangeProfile;
  }

  public void setEmvInterchangeProfile(String emvInterchangeProfile) {
    this.emvInterchangeProfile = emvInterchangeProfile;
  }

  public TransactionData emvIssuerAppData(String emvIssuerAppData) {
    this.emvIssuerAppData = emvIssuerAppData;
    return this;
  }

   /**
   * Application data provided by the issuer
   * @return emvIssuerAppData
  **/
  @ApiModelProperty(example = "06011103A00000", value = "Application data provided by the issuer")
  public String getEmvIssuerAppData() {
    return emvIssuerAppData;
  }

  public void setEmvIssuerAppData(String emvIssuerAppData) {
    this.emvIssuerAppData = emvIssuerAppData;
  }

  public TransactionData emvPanSeqNum(String emvPanSeqNum) {
    this.emvPanSeqNum = emvPanSeqNum;
    return this;
  }

   /**
   * Sequence number provided by the card
   * @return emvPanSeqNum
  **/
  @ApiModelProperty(example = "01", value = "Sequence number provided by the card")
  public String getEmvPanSeqNum() {
    return emvPanSeqNum;
  }

  public void setEmvPanSeqNum(String emvPanSeqNum) {
    this.emvPanSeqNum = emvPanSeqNum;
  }

  public TransactionData emvTerminalCapabilities(String emvTerminalCapabilities) {
    this.emvTerminalCapabilities = emvTerminalCapabilities;
    return this;
  }

   /**
   * Terminal capabilities of the device
   * @return emvTerminalCapabilities
  **/
  @ApiModelProperty(example = "E0B0C8", value = "Terminal capabilities of the device")
  public String getEmvTerminalCapabilities() {
    return emvTerminalCapabilities;
  }

  public void setEmvTerminalCapabilities(String emvTerminalCapabilities) {
    this.emvTerminalCapabilities = emvTerminalCapabilities;
  }

  public TransactionData emvTerminalType(String emvTerminalType) {
    this.emvTerminalType = emvTerminalType;
    return this;
  }

   /**
   * The terminal type of the device
   * @return emvTerminalType
  **/
  @ApiModelProperty(example = "22", value = "The terminal type of the device")
  public String getEmvTerminalType() {
    return emvTerminalType;
  }

  public void setEmvTerminalType(String emvTerminalType) {
    this.emvTerminalType = emvTerminalType;
  }

  public TransactionData emvTerminalVerificationResults(String emvTerminalVerificationResults) {
    this.emvTerminalVerificationResults = emvTerminalVerificationResults;
    return this;
  }

   /**
   * TVR provided by the verification process of the transaction
   * @return emvTerminalVerificationResults
  **/
  @ApiModelProperty(example = "0000000000", value = "TVR provided by the verification process of the transaction")
  public String getEmvTerminalVerificationResults() {
    return emvTerminalVerificationResults;
  }

  public void setEmvTerminalVerificationResults(String emvTerminalVerificationResults) {
    this.emvTerminalVerificationResults = emvTerminalVerificationResults;
  }

  public TransactionData emvTrack2Equivalent(String emvTrack2Equivalent) {
    this.emvTrack2Equivalent = emvTrack2Equivalent;
    return this;
  }

   /**
   * A masked version of the card number
   * @return emvTrack2Equivalent
  **/
  @ApiModelProperty(example = "4***********0010", value = "A masked version of the card number")
  public String getEmvTrack2Equivalent() {
    return emvTrack2Equivalent;
  }

  public void setEmvTrack2Equivalent(String emvTrack2Equivalent) {
    this.emvTrack2Equivalent = emvTrack2Equivalent;
  }

  public TransactionData emvTxnCurrencyCode(String emvTxnCurrencyCode) {
    this.emvTxnCurrencyCode = emvTxnCurrencyCode;
    return this;
  }

   /**
   * ISO currency code of the transaction
   * @return emvTxnCurrencyCode
  **/
  @ApiModelProperty(example = "840", value = "ISO currency code of the transaction")
  public String getEmvTxnCurrencyCode() {
    return emvTxnCurrencyCode;
  }

  public void setEmvTxnCurrencyCode(String emvTxnCurrencyCode) {
    this.emvTxnCurrencyCode = emvTxnCurrencyCode;
  }

  public TransactionData emvTxnDate(String emvTxnDate) {
    this.emvTxnDate = emvTxnDate;
    return this;
  }

   /**
   * ISO date of the transaction
   * @return emvTxnDate
  **/
  @ApiModelProperty(example = "2017-11-01", value = "ISO date of the transaction")
  public String getEmvTxnDate() {
    return emvTxnDate;
  }

  public void setEmvTxnDate(String emvTxnDate) {
    this.emvTxnDate = emvTxnDate;
  }

  public TransactionData emvTxnSequenceCounter(String emvTxnSequenceCounter) {
    this.emvTxnSequenceCounter = emvTxnSequenceCounter;
    return this;
  }

   /**
   * A sequence counter of the transaction
   * @return emvTxnSequenceCounter
  **/
  @ApiModelProperty(example = "4", value = "A sequence counter of the transaction")
  public String getEmvTxnSequenceCounter() {
    return emvTxnSequenceCounter;
  }

  public void setEmvTxnSequenceCounter(String emvTxnSequenceCounter) {
    this.emvTxnSequenceCounter = emvTxnSequenceCounter;
  }

  public TransactionData emvTxnStatusInfo(String emvTxnStatusInfo) {
    this.emvTxnStatusInfo = emvTxnStatusInfo;
    return this;
  }

   /**
   * Status info of the transaction
   * @return emvTxnStatusInfo
  **/
  @ApiModelProperty(example = "0000", value = "Status info of the transaction")
  public String getEmvTxnStatusInfo() {
    return emvTxnStatusInfo;
  }

  public void setEmvTxnStatusInfo(String emvTxnStatusInfo) {
    this.emvTxnStatusInfo = emvTxnStatusInfo;
  }

  public TransactionData emvTxnType(String emvTxnType) {
    this.emvTxnType = emvTxnType;
    return this;
  }

   /**
   * Transacrtion type information returned
   * @return emvTxnType
  **/
  @ApiModelProperty(example = "00", value = "Transacrtion type information returned")
  public String getEmvTxnType() {
    return emvTxnType;
  }

  public void setEmvTxnType(String emvTxnType) {
    this.emvTxnType = emvTxnType;
  }

  public TransactionData emvTxnUnpredictableNumber(String emvTxnUnpredictableNumber) {
    this.emvTxnUnpredictableNumber = emvTxnUnpredictableNumber;
    return this;
  }

   /**
   * The UN or unpredicatble number in the transaction process
   * @return emvTxnUnpredictableNumber
  **/
  @ApiModelProperty(example = "FF10616", value = "The UN or unpredicatble number in the transaction process")
  public String getEmvTxnUnpredictableNumber() {
    return emvTxnUnpredictableNumber;
  }

  public void setEmvTxnUnpredictableNumber(String emvTxnUnpredictableNumber) {
    this.emvTxnUnpredictableNumber = emvTxnUnpredictableNumber;
  }

  public TransactionData isApi(Boolean isApi) {
    this.isApi = isApi;
    return this;
  }

   /**
   * Determines if the card was API derived
   * @return isApi
  **/
  @ApiModelProperty(example = "true", value = "Determines if the card was API derived")
  public Boolean isIsApi() {
    return isApi;
  }

  public void setIsApi(Boolean isApi) {
    this.isApi = isApi;
  }

  public TransactionData isClosed(Boolean isClosed) {
    this.isClosed = isClosed;
    return this;
  }

   /**
   * Determines if the transaction is closed
   * @return isClosed
  **/
  @ApiModelProperty(example = "true", value = "Determines if the transaction is closed")
  public Boolean isIsClosed() {
    return isClosed;
  }

  public void setIsClosed(Boolean isClosed) {
    this.isClosed = isClosed;
  }

  public TransactionData isCommercialCard(Boolean isCommercialCard) {
    this.isCommercialCard = isCommercialCard;
    return this;
  }

   /**
   * Determines if the card was a commercial card
   * @return isCommercialCard
  **/
  @ApiModelProperty(example = "false", value = "Determines if the card was a commercial card")
  public Boolean isIsCommercialCard() {
    return isCommercialCard;
  }

  public void setIsCommercialCard(Boolean isCommercialCard) {
    this.isCommercialCard = isCommercialCard;
  }

  public TransactionData isCompleted(Boolean isCompleted) {
    this.isCompleted = isCompleted;
    return this;
  }

   /**
   * Determines if the transaction was completed
   * @return isCompleted
  **/
  @ApiModelProperty(example = "true", value = "Determines if the transaction was completed")
  public Boolean isIsCompleted() {
    return isCompleted;
  }

  public void setIsCompleted(Boolean isCompleted) {
    this.isCompleted = isCompleted;
  }

  public TransactionData isContactless(Boolean isContactless) {
    this.isContactless = isContactless;
    return this;
  }

   /**
   * Determines if the card was contactless
   * @return isContactless
  **/
  @ApiModelProperty(example = "true", value = "Determines if the card was contactless")
  public Boolean isIsContactless() {
    return isContactless;
  }

  public void setIsContactless(Boolean isContactless) {
    this.isContactless = isContactless;
  }

  public TransactionData isFallback(Boolean isFallback) {
    this.isFallback = isFallback;
    return this;
  }

   /**
   * Determines if fallback was used
   * @return isFallback
  **/
  @ApiModelProperty(example = "false", value = "Determines if fallback was used")
  public Boolean isIsFallback() {
    return isFallback;
  }

  public void setIsFallback(Boolean isFallback) {
    this.isFallback = isFallback;
  }

  public TransactionData isOffline(Boolean isOffline) {
    this.isOffline = isOffline;
    return this;
  }

   /**
   * Determines if the transaction was authorised offline
   * @return isOffline
  **/
  @ApiModelProperty(example = "false", value = "Determines if the transaction was authorised offline")
  public Boolean isIsOffline() {
    return isOffline;
  }

  public void setIsOffline(Boolean isOffline) {
    this.isOffline = isOffline;
  }

  public TransactionData isPending(Boolean isPending) {
    this.isPending = isPending;
    return this;
  }

   /**
   * Determines if the transaction is pending
   * @return isPending
  **/
  @ApiModelProperty(example = "false", value = "Determines if the transaction is pending")
  public Boolean isIsPending() {
    return isPending;
  }

  public void setIsPending(Boolean isPending) {
    this.isPending = isPending;
  }

  public TransactionData isVoided(Boolean isVoided) {
    this.isVoided = isVoided;
    return this;
  }

   /**
   * Determines if the transaction was voided
   * @return isVoided
  **/
  @ApiModelProperty(example = "false", value = "Determines if the transaction was voided")
  public Boolean isIsVoided() {
    return isVoided;
  }

  public void setIsVoided(Boolean isVoided) {
    this.isVoided = isVoided;
  }

  public TransactionData merchantReceipt(String merchantReceipt) {
    this.merchantReceipt = merchantReceipt;
    return this;
  }

   /**
   * The merchant receipt
   * @return merchantReceipt
  **/
  @ApiModelProperty(value = "The merchant receipt")
  public String getMerchantReceipt() {
    return merchantReceipt;
  }

  public void setMerchantReceipt(String merchantReceipt) {
    this.merchantReceipt = merchantReceipt;
  }

  public TransactionData messageNumber(String messageNumber) {
    this.messageNumber = messageNumber;
    return this;
  }

   /**
   * The message number of the transaction
   * @return messageNumber
  **/
  @ApiModelProperty(example = "2", value = "The message number of the transaction")
  public String getMessageNumber() {
    return messageNumber;
  }

  public void setMessageNumber(String messageNumber) {
    this.messageNumber = messageNumber;
  }

  public TransactionData messageType(String messageType) {
    this.messageType = messageType;
    return this;
  }

   /**
   * The message type of the transaction
   * @return messageType
  **/
  @ApiModelProperty(example = "debit_presentment", value = "The message type of the transaction")
  public String getMessageType() {
    return messageType;
  }

  public void setMessageType(String messageType) {
    this.messageType = messageType;
  }

  public TransactionData responseCode(String responseCode) {
    this.responseCode = responseCode;
    return this;
  }

   /**
   * A response code provided by the acquirer
   * @return responseCode
  **/
  @ApiModelProperty(example = "00", value = "A response code provided by the acquirer")
  public String getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }

  public TransactionData responseText(String responseText) {
    this.responseText = responseText;
    return this;
  }

   /**
   * The response text returned by the acquirer
   * @return responseText
  **/
  @ApiModelProperty(example = "AUTH CODE 604405", value = "The response text returned by the acquirer")
  public String getResponseText() {
    return responseText;
  }

  public void setResponseText(String responseText) {
    this.responseText = responseText;
  }

  public TransactionData result(String result) {
    this.result = result;
    return this;
  }

   /**
   * A text result of the transaction
   * @return result
  **/
  @ApiModelProperty(example = "approved", value = "A text result of the transaction")
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }

  public TransactionData scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

   /**
   * A description of the card scheme for the card
   * @return scheme
  **/
  @ApiModelProperty(example = "visa-qvsdc", value = "A description of the card scheme for the card")
  public String getScheme() {
    return scheme;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }

  public TransactionData signatureRequired(Boolean signatureRequired) {
    this.signatureRequired = signatureRequired;
    return this;
  }

   /**
   * Determines whether a signature was required for legacy systems
   * @return signatureRequired
  **/
  @ApiModelProperty(example = "false", value = "Determines whether a signature was required for legacy systems")
  public Boolean isSignatureRequired() {
    return signatureRequired;
  }

  public void setSignatureRequired(Boolean signatureRequired) {
    this.signatureRequired = signatureRequired;
  }

  public TransactionData terminalId(String terminalId) {
    this.terminalId = terminalId;
    return this;
  }

   /**
   * The terminal id used from the device
   * @return terminalId
  **/
  @ApiModelProperty(example = "33420006", value = "The terminal id used from the device")
  public String getTerminalId() {
    return terminalId;
  }

  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  public TransactionData totalAmount(Integer totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * The total amount processed
   * @return totalAmount
  **/
  @ApiModelProperty(example = "100", value = "The total amount processed")
  public Integer getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Integer totalAmount) {
    this.totalAmount = totalAmount;
  }

  public TransactionData transactionType(String transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The type of transaction processed
   * @return transactionType
  **/
  @ApiModelProperty(example = "sale", value = "The type of transaction processed")
  public String getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }

  public TransactionData uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The unique id of the transaction
   * @return uuid
  **/
  @ApiModelProperty(example = "pt-4", value = "The unique id of the transaction")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public TransactionData verifiedByOdcvm(Boolean verifiedByOdcvm) {
    this.verifiedByOdcvm = verifiedByOdcvm;
    return this;
  }

   /**
   * Determines if the transaction was verified by od cvm
   * @return verifiedByOdcvm
  **/
  @ApiModelProperty(example = "false", value = "Determines if the transaction was verified by od cvm")
  public Boolean isVerifiedByOdcvm() {
    return verifiedByOdcvm;
  }

  public void setVerifiedByOdcvm(Boolean verifiedByOdcvm) {
    this.verifiedByOdcvm = verifiedByOdcvm;
  }

  public TransactionData verifiedByPin(Boolean verifiedByPin) {
    this.verifiedByPin = verifiedByPin;
    return this;
  }

   /**
   * Determines if the transaction was verified by pin entry
   * @return verifiedByPin
  **/
  @ApiModelProperty(example = "false", value = "Determines if the transaction was verified by pin entry")
  public Boolean isVerifiedByPin() {
    return verifiedByPin;
  }

  public void setVerifiedByPin(Boolean verifiedByPin) {
    this.verifiedByPin = verifiedByPin;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionData transactionData = (TransactionData) o;
    return Objects.equals(this.acquirerResponse, transactionData.acquirerResponse) &&
        Objects.equals(this.additionalData, transactionData.additionalData) &&
        Objects.equals(this.authorizingEntity, transactionData.authorizingEntity) &&
        Objects.equals(this.auxiliaryData, transactionData.auxiliaryData) &&
        Objects.equals(this.baseAmount, transactionData.baseAmount) &&
        Objects.equals(this.cardPresented, transactionData.cardPresented) &&
        Objects.equals(this.cardType, transactionData.cardType) &&
        Objects.equals(this.completedAt, transactionData.completedAt) &&
        Objects.equals(this.createdAt, transactionData.createdAt) &&
        Objects.equals(this.currencySymbol, transactionData.currencySymbol) &&
        Objects.equals(this.customerReceipt, transactionData.customerReceipt) &&
        Objects.equals(this.cvmMode, transactionData.cvmMode) &&
        Objects.equals(this.datasource, transactionData.datasource) &&
        Objects.equals(this.declinedByCard, transactionData.declinedByCard) &&
        Objects.equals(this.emvAppCryptogram, transactionData.emvAppCryptogram) &&
        Objects.equals(this.emvAppExpirationDate, transactionData.emvAppExpirationDate) &&
        Objects.equals(this.emvAppTxnCounter, transactionData.emvAppTxnCounter) &&
        Objects.equals(this.emvAuthorizedAmount, transactionData.emvAuthorizedAmount) &&
        Objects.equals(this.emvCardholderVerificationResults, transactionData.emvCardholderVerificationResults) &&
        Objects.equals(this.emvCountryCode, transactionData.emvCountryCode) &&
        Objects.equals(this.emvCryptogramInfoData, transactionData.emvCryptogramInfoData) &&
        Objects.equals(this.emvIccAppid, transactionData.emvIccAppid) &&
        Objects.equals(this.emvInterchangeProfile, transactionData.emvInterchangeProfile) &&
        Objects.equals(this.emvIssuerAppData, transactionData.emvIssuerAppData) &&
        Objects.equals(this.emvPanSeqNum, transactionData.emvPanSeqNum) &&
        Objects.equals(this.emvTerminalCapabilities, transactionData.emvTerminalCapabilities) &&
        Objects.equals(this.emvTerminalType, transactionData.emvTerminalType) &&
        Objects.equals(this.emvTerminalVerificationResults, transactionData.emvTerminalVerificationResults) &&
        Objects.equals(this.emvTrack2Equivalent, transactionData.emvTrack2Equivalent) &&
        Objects.equals(this.emvTxnCurrencyCode, transactionData.emvTxnCurrencyCode) &&
        Objects.equals(this.emvTxnDate, transactionData.emvTxnDate) &&
        Objects.equals(this.emvTxnSequenceCounter, transactionData.emvTxnSequenceCounter) &&
        Objects.equals(this.emvTxnStatusInfo, transactionData.emvTxnStatusInfo) &&
        Objects.equals(this.emvTxnType, transactionData.emvTxnType) &&
        Objects.equals(this.emvTxnUnpredictableNumber, transactionData.emvTxnUnpredictableNumber) &&
        Objects.equals(this.isApi, transactionData.isApi) &&
        Objects.equals(this.isClosed, transactionData.isClosed) &&
        Objects.equals(this.isCommercialCard, transactionData.isCommercialCard) &&
        Objects.equals(this.isCompleted, transactionData.isCompleted) &&
        Objects.equals(this.isContactless, transactionData.isContactless) &&
        Objects.equals(this.isFallback, transactionData.isFallback) &&
        Objects.equals(this.isOffline, transactionData.isOffline) &&
        Objects.equals(this.isPending, transactionData.isPending) &&
        Objects.equals(this.isVoided, transactionData.isVoided) &&
        Objects.equals(this.merchantReceipt, transactionData.merchantReceipt) &&
        Objects.equals(this.messageNumber, transactionData.messageNumber) &&
        Objects.equals(this.messageType, transactionData.messageType) &&
        Objects.equals(this.responseCode, transactionData.responseCode) &&
        Objects.equals(this.responseText, transactionData.responseText) &&
        Objects.equals(this.result, transactionData.result) &&
        Objects.equals(this.scheme, transactionData.scheme) &&
        Objects.equals(this.signatureRequired, transactionData.signatureRequired) &&
        Objects.equals(this.terminalId, transactionData.terminalId) &&
        Objects.equals(this.totalAmount, transactionData.totalAmount) &&
        Objects.equals(this.transactionType, transactionData.transactionType) &&
        Objects.equals(this.uuid, transactionData.uuid) &&
        Objects.equals(this.verifiedByOdcvm, transactionData.verifiedByOdcvm) &&
        Objects.equals(this.verifiedByPin, transactionData.verifiedByPin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerResponse, additionalData, authorizingEntity, auxiliaryData, baseAmount, cardPresented, cardType, completedAt, createdAt, currencySymbol, customerReceipt, cvmMode, datasource, declinedByCard, emvAppCryptogram, emvAppExpirationDate, emvAppTxnCounter, emvAuthorizedAmount, emvCardholderVerificationResults, emvCountryCode, emvCryptogramInfoData, emvIccAppid, emvInterchangeProfile, emvIssuerAppData, emvPanSeqNum, emvTerminalCapabilities, emvTerminalType, emvTerminalVerificationResults, emvTrack2Equivalent, emvTxnCurrencyCode, emvTxnDate, emvTxnSequenceCounter, emvTxnStatusInfo, emvTxnType, emvTxnUnpredictableNumber, isApi, isClosed, isCommercialCard, isCompleted, isContactless, isFallback, isOffline, isPending, isVoided, merchantReceipt, messageNumber, messageType, responseCode, responseText, result, scheme, signatureRequired, terminalId, totalAmount, transactionType, uuid, verifiedByOdcvm, verifiedByPin);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionData {\n");
    
    sb.append("    acquirerResponse: ").append(toIndentedString(acquirerResponse)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    authorizingEntity: ").append(toIndentedString(authorizingEntity)).append("\n");
    sb.append("    auxiliaryData: ").append(toIndentedString(auxiliaryData)).append("\n");
    sb.append("    baseAmount: ").append(toIndentedString(baseAmount)).append("\n");
    sb.append("    cardPresented: ").append(toIndentedString(cardPresented)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    customerReceipt: ").append(toIndentedString(customerReceipt)).append("\n");
    sb.append("    cvmMode: ").append(toIndentedString(cvmMode)).append("\n");
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    declinedByCard: ").append(toIndentedString(declinedByCard)).append("\n");
    sb.append("    emvAppCryptogram: ").append(toIndentedString(emvAppCryptogram)).append("\n");
    sb.append("    emvAppExpirationDate: ").append(toIndentedString(emvAppExpirationDate)).append("\n");
    sb.append("    emvAppTxnCounter: ").append(toIndentedString(emvAppTxnCounter)).append("\n");
    sb.append("    emvAuthorizedAmount: ").append(toIndentedString(emvAuthorizedAmount)).append("\n");
    sb.append("    emvCardholderVerificationResults: ").append(toIndentedString(emvCardholderVerificationResults)).append("\n");
    sb.append("    emvCountryCode: ").append(toIndentedString(emvCountryCode)).append("\n");
    sb.append("    emvCryptogramInfoData: ").append(toIndentedString(emvCryptogramInfoData)).append("\n");
    sb.append("    emvIccAppid: ").append(toIndentedString(emvIccAppid)).append("\n");
    sb.append("    emvInterchangeProfile: ").append(toIndentedString(emvInterchangeProfile)).append("\n");
    sb.append("    emvIssuerAppData: ").append(toIndentedString(emvIssuerAppData)).append("\n");
    sb.append("    emvPanSeqNum: ").append(toIndentedString(emvPanSeqNum)).append("\n");
    sb.append("    emvTerminalCapabilities: ").append(toIndentedString(emvTerminalCapabilities)).append("\n");
    sb.append("    emvTerminalType: ").append(toIndentedString(emvTerminalType)).append("\n");
    sb.append("    emvTerminalVerificationResults: ").append(toIndentedString(emvTerminalVerificationResults)).append("\n");
    sb.append("    emvTrack2Equivalent: ").append(toIndentedString(emvTrack2Equivalent)).append("\n");
    sb.append("    emvTxnCurrencyCode: ").append(toIndentedString(emvTxnCurrencyCode)).append("\n");
    sb.append("    emvTxnDate: ").append(toIndentedString(emvTxnDate)).append("\n");
    sb.append("    emvTxnSequenceCounter: ").append(toIndentedString(emvTxnSequenceCounter)).append("\n");
    sb.append("    emvTxnStatusInfo: ").append(toIndentedString(emvTxnStatusInfo)).append("\n");
    sb.append("    emvTxnType: ").append(toIndentedString(emvTxnType)).append("\n");
    sb.append("    emvTxnUnpredictableNumber: ").append(toIndentedString(emvTxnUnpredictableNumber)).append("\n");
    sb.append("    isApi: ").append(toIndentedString(isApi)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    isCommercialCard: ").append(toIndentedString(isCommercialCard)).append("\n");
    sb.append("    isCompleted: ").append(toIndentedString(isCompleted)).append("\n");
    sb.append("    isContactless: ").append(toIndentedString(isContactless)).append("\n");
    sb.append("    isFallback: ").append(toIndentedString(isFallback)).append("\n");
    sb.append("    isOffline: ").append(toIndentedString(isOffline)).append("\n");
    sb.append("    isPending: ").append(toIndentedString(isPending)).append("\n");
    sb.append("    isVoided: ").append(toIndentedString(isVoided)).append("\n");
    sb.append("    merchantReceipt: ").append(toIndentedString(merchantReceipt)).append("\n");
    sb.append("    messageNumber: ").append(toIndentedString(messageNumber)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseText: ").append(toIndentedString(responseText)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    signatureRequired: ").append(toIndentedString(signatureRequired)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    verifiedByOdcvm: ").append(toIndentedString(verifiedByOdcvm)).append("\n");
    sb.append("    verifiedByPin: ").append(toIndentedString(verifiedByPin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

