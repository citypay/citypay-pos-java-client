/*
 * CityPay POS API
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.citypay.pos.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A request for a sale
 */
@ApiModel(description = "A request for a sale")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-22T10:53:11.095Z")
public class SaleRequest {
  @SerializedName("device")
  private String device = null;

  @SerializedName("amount")
  private Integer amount = null;

  @SerializedName("identifier")
  private String identifier = null;

  public SaleRequest device(String device) {
    this.device = device;
    return this;
  }

   /**
   * The name of the target device used by the API. The device will be setup prior to the sale but allows targeting of multiple devices.
   * @return device
  **/
  @ApiModelProperty(example = "TID001", required = true, value = "The name of the target device used by the API. The device will be setup prior to the sale but allows targeting of multiple devices.")
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }

  public SaleRequest amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount to process in the lowest denomination and in the base currency of the device. 4798 for instance would process the transaction for £47.98
   * @return amount
  **/
  @ApiModelProperty(example = "4798", required = true, value = "The amount to process in the lowest denomination and in the base currency of the device. 4798 for instance would process the transaction for £47.98")
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public SaleRequest identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * An identifier or reference for the sale as taken by the point of sale system. This should be used to cross reference transactions after it has processed. The value should be unique and will be used to check on the processing of the transaction.
   * @return identifier
  **/
  @ApiModelProperty(example = "Tx12345", required = true, value = "An identifier or reference for the sale as taken by the point of sale system. This should be used to cross reference transactions after it has processed. The value should be unique and will be used to check on the processing of the transaction.")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleRequest saleRequest = (SaleRequest) o;
    return Objects.equals(this.device, saleRequest.device) &&
        Objects.equals(this.amount, saleRequest.amount) &&
        Objects.equals(this.identifier, saleRequest.identifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(device, amount, identifier);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleRequest {\n");
    
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

