/*
 * Kinetic Smart API
 * Kinetic Smart Swagger Implementatin
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.citypay.pos.api.kinetic;

import com.citypay.invoker.ApiException;
import com.citypay.pos.model.kinetic.CloseResponse;
import com.citypay.pos.model.kinetic.PrintRequest;
import com.citypay.pos.model.kinetic.Result;
import com.citypay.pos.model.kinetic.ReversalRequest;
import com.citypay.pos.model.kinetic.SaleRequest;
import com.citypay.pos.model.kinetic.SaleResponse;
import com.citypay.pos.model.kinetic.SuccessResponse;
import com.citypay.pos.model.kinetic.TransactionProgress;
import com.citypay.pos.model.kinetic.TransactionResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Ignore
public class PaymentApiTest {

    private final PaymentApi api = new PaymentApi();

    
    /**
     * When this instruction is sent, the reconciliation process will be started and the transactions for the day closed. Important, no confirmation is prompted on the device.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeJsonPostTest() throws ApiException {
        CloseResponse response = api.closeJsonPost();

        // TODO: test validations
    }
    
    /**
     * Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void printJsonPostTest() throws ApiException {
        PrintRequest body = null;
        SuccessResponse response = api.printJsonPost(body);

        // TODO: test validations
    }
    
    /**
     * Initiate a refund transaction on the device.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refundJsonPostTest() throws ApiException {
        SaleRequest body = null;
        SaleResponse response = api.refundJsonPost(body);

        // TODO: test validations
    }
    
    /**
     * Initiate a reversal on the device.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reversalJsonPostTest() throws ApiException {
        ReversalRequest body = null;
        SaleResponse response = api.reversalJsonPost(body);

        // TODO: test validations
    }
    
    /**
     * Initiate a sale transaction on the device.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saleJsonPostTest() throws ApiException {
        SaleRequest body = null;
        SaleResponse response = api.saleJsonPost(body);

        // TODO: test validations
    }
    
    /**
     * Request the status of a transaction in progress or a complete transaction using the uuid as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all the disarmed transaction data).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionJsonPostTest() throws ApiException {
        TransactionProgress body = null;

        // TODO: test validations
    }
    
}
