/*
 * CityPay POS API
 * CityPay Point of Sale API for payment with card present devices including EMV readers and contactless POS readers.  The API makes it simple to add EMV and contactless card acceptance to iOS, Android, Tablet and desktop applicaitons using a HTTPS protocol. It segregates the complexity of payment processing from the sales environment and eliminates any necessity for the target system to handle card data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@citypay.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Result;
import io.swagger.client.model.ReversalRequest;
import io.swagger.client.model.SaleRequest;
import io.swagger.client.model.SaleResponse;
import io.swagger.client.model.SuccessResponse;
import io.swagger.client.model.TransactionProgress;
import io.swagger.client.model.TransactionResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentModuleApi
 */
@Ignore
public class PaymentModuleApiTest {

    private final PaymentModuleApi api = new PaymentModuleApi();

    
    /**
     * Receipt Print
     *
     * Reprint a merchant or customer receipt for a transaction that exists on the device (i.e. has not been cleared by End of Day process). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void receiptTest() throws ApiException {
        TransactionProgress body = null;
        TransactionResult response = api.receipt(body);

        // TODO: test validations
    }
    
    /**
     * Refund Transaction
     *
     * Initiates a new refund to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refundTest() throws ApiException {
        SaleRequest body = null;
        SaleResponse response = api.refund(body);

        // TODO: test validations
    }
    
    /**
     * Reversal Tranasction
     *
     * Initiates a reversal to a device. No confirmation is made and the transaction reversal process is run. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reversalTest() throws ApiException {
        ReversalRequest body = null;
        SaleResponse response = api.reversal(body);

        // TODO: test validations
    }
    
    /**
     * Sale Transaction
     *
     * Initiates a new sale to a device. The action will contact the device and request a transaction start including the amount and a unique reference to track the transaction through it&#39;s lifecycle. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saleTest() throws ApiException {
        SaleRequest body = null;
        SaleResponse response = api.sale(body);

        // TODO: test validations
    }
    
    /**
     * Transaction Status
     *
     * Request the status of a transaction in progress or a complete transaction using the identifier as the reference. Depending on the state of the transaction, the response will indicate if it is not found, in progress (and the current stage in the transaction workflow) or complete (with all transaction data). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionTest() throws ApiException {
        TransactionProgress body = null;
        TransactionResult response = api.transaction(body);

        // TODO: test validations
    }
    
}
